{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/test/src/index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport * as serviceWorker from './serviceWorker';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: [],\n      todosSearch: [],\n      users: [],\n      searchTerm: \"\"\n    };\n  }\n\n  /**\n   * On initalization, load the todos and users into state\n   */\n  componentWillMount() {\n    this.getTodos().then(this.getUsers());\n  }\n  /**\n   * read the todos and put them into state as todosSearch and todos\n   * @returns {Promise.<TResult>|*|any|Promise<U>|never}\n   */\n\n\n  getTodos() {\n    return axios.get('https://jsonplaceholder.typicode.com/todos').then(response => {\n      let todos = response.data;\n      this.setState({\n        todosSearch: todos,\n        todos: todos\n      });\n    });\n  }\n  /**\n   * read the users and put them into state\n   */\n\n\n  getUsers() {\n    axios.get('https://jsonplaceholder.typicode.com/users').then(response => {\n      this.setState({\n        users: response.data\n      });\n    });\n  }\n  /**\n   * In the listing of todos, highlight parts of the todo's title that matches the search term\n   * @param title\n   * @returns {{__html: *}}\n   */\n\n\n  createSearchHighlighting(title) {\n    let titleSearchHighlighted = title;\n\n    if (this.state.searchTerm.length > 0) {\n      titleSearchHighlighted = titleSearchHighlighted.replace(new RegExp(this.state.searchTerm, 'g'), '<span class=\"searchHighlight\">' + this.state.searchTerm + '</span>');\n    }\n\n    return {\n      __html: titleSearchHighlighted\n    };\n  }\n  /**\n   * Provide html for presenting the list of todos\n   * @returns {Array}\n   */\n\n\n  formatTodosListing() {\n    let todos = this.state.todosSearch.map(todo => {\n      var user = this.state.users.find(function (user) {\n        return user.id === todo.userId;\n      });\n      todo.userName = user && user.name ? user.name : \"Unknown\";\n      return React.createElement(\"tr\", {\n        key: todo.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, todo.id), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, todo.userName), React.createElement(\"th\", {\n        dangerouslySetInnerHTML: this.createSearchHighlighting(todo.title),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, todo.completed ? \"Yes\" : \"No\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: this.deleteTodo.bind(this, todo.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Delete\")));\n    });\n    return todos;\n  }\n  /**\n   *\n   * @param event\n   */\n\n\n  search(event) {\n    this.setState({\n      searchTerm: event.target.value\n    });\n    let todos = this.state.todos.filter(function (todo) {\n      return todo.title.includes(event.target.value);\n    });\n    this.setState({\n      todosSearch: todos\n    });\n  }\n  /**\n   *\n   * @param id\n   */\n\n\n  deleteTodo(id) {\n    let todos = this.state.todosSearch.filter(function (todo) {\n      return todo.id !== id;\n    });\n    let todosBackup = this.state.todos.filter(function (todoBackup) {\n      return todoBackup.id !== id;\n    });\n    this.setState({\n      todosSearch: todos,\n      todos: todosBackup\n    });\n  }\n  /**\n   *\n   * @returns {XML}\n   */\n\n\n  render() {\n    let todos = this.formatTodosListing();\n    return React.createElement(\"div\", {\n      className: \"App container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Search\",\n      onChange: this.search.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"ID\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"User\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Completed\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Actions\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, todos)));\n  }\n\n} //export default App;\n\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 176\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Applications/MAMP/htdocs/test/src/index.js"],"names":["React","Component","ReactDOM","axios","serviceWorker","App","state","todos","todosSearch","users","searchTerm","componentWillMount","getTodos","then","getUsers","get","response","data","setState","createSearchHighlighting","title","titleSearchHighlighted","length","replace","RegExp","__html","formatTodosListing","map","todo","user","find","id","userId","userName","name","completed","deleteTodo","bind","search","event","target","value","filter","includes","todosBackup","todoBackup","render","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React, {Component}  from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport * as serviceWorker from './serviceWorker';\n\nclass App extends Component {\n\n    /**\n     * Hold the state of the App.\n     * When variables in state are changed, the changes are automatically applied to the DOM by React:\n     * todos: the original list of downloaded todos\n     * todosSearch: the list of downloaded todos, filtered to only contain those that match the search\n     * users: the original list of downloaded users\n     * searchTearm: tracks the current search term\n     * @type {{todos: Array, todosSearch: Array, users: Array, searchTerm: string}}\n     */\n    state = {\n        todos: [],\n        todosSearch: [],\n        users: [],\n        searchTerm: \"\",\n    }\n\n    /**\n     * On initalization, load the todos and users into state\n     */\n    componentWillMount() {\n        this.getTodos()\n            .then(this.getUsers())\n    }\n\n    /**\n     * read the todos and put them into state as todosSearch and todos\n     * @returns {Promise.<TResult>|*|any|Promise<U>|never}\n     */\n    getTodos() {\n        return axios.get('https://jsonplaceholder.typicode.com/todos').then((response) => {\n\n            let todos = response.data;\n            this.setState({\n                todosSearch: todos,\n                todos: todos\n            })\n        });\n    }\n\n    /**\n     * read the users and put them into state\n     */\n    getUsers() {\n        axios.get('https://jsonplaceholder.typicode.com/users').then((response) => {\n            this.setState({\n                users: response.data\n            })\n        });\n    }\n\n    /**\n     * In the listing of todos, highlight parts of the todo's title that matches the search term\n     * @param title\n     * @returns {{__html: *}}\n     */\n    createSearchHighlighting(title) {\n\n        let titleSearchHighlighted = title;\n        if (this.state.searchTerm.length > 0) {\n            titleSearchHighlighted = titleSearchHighlighted.replace(\n                new RegExp(this.state.searchTerm, 'g'),\n                '<span class=\"searchHighlight\">' + this.state.searchTerm + '</span>'\n            );\n        }\n\n        return {__html: titleSearchHighlighted};\n    }\n\n    /**\n     * Provide html for presenting the list of todos\n     * @returns {Array}\n     */\n    formatTodosListing() {\n        let todos = this.state.todosSearch.map((todo) => {\n\n            var user = this.state.users.find(function (user) {\n                return user.id === todo.userId;\n            });\n\n            todo.userName = (user && user.name) ? user.name : \"Unknown\";\n\n            return (\n                <tr key={todo.id}>\n                    <th>{todo.id}</th>\n                    <th>{todo.userName}</th>\n                    <th dangerouslySetInnerHTML={this.createSearchHighlighting(todo.title)}></th>\n                    <th>{todo.completed ? \"Yes\" : \"No\"}</th>\n                    <th>\n                        <button className=\"btn btn-danger\"\n                                onClick={this.deleteTodo.bind(this, todo.id)}>Delete\n                        </button>\n                    </th>\n                </tr>\n            )\n        });\n        return todos;\n    }\n\n    /**\n     *\n     * @param event\n     */\n    search(event) {\n\n        this.setState({\n            searchTerm: event.target.value\n        });\n\n        let todos = this.state.todos.filter(function (todo) {\n            return todo.title.includes(event.target.value)\n        });\n        this.setState({\n            todosSearch: todos\n        });\n    }\n\n    /**\n     *\n     * @param id\n     */\n    deleteTodo(id) {\n\n        let todos = this.state.todosSearch.filter(function (todo) {\n            return todo.id !== id\n        });\n        let todosBackup = this.state.todos.filter(function (todoBackup) {\n            return todoBackup.id !== id\n        });\n        this.setState({\n            todosSearch: todos,\n            todos: todosBackup\n        });\n    }\n\n    /**\n     *\n     * @returns {XML}\n     */\n    render() {\n\n        let todos = this.formatTodosListing();\n\n        return (\n\n            <div className=\"App container\">\n\n                <input type=\"text\" placeholder=\"Search\" onChange={this.search.bind(this)}/>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>User</th>\n                        <th>Title</th>\n                        <th>Completed</th>\n                        <th>Actions</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {todos}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\n//export default App;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}