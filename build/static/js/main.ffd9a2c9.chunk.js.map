{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","App","state","todos","todosSearch","users","searchTerm","this","getTodos","then","getUsers","axios","get","response","data","setState","title","titleSearchHighlighted","length","replace","RegExp","__html","map","todo","user","find","id","userId","userName","name","key","dangerouslySetInnerHTML","createSearchHighlighting","completed","className","onClick","deleteTodo","bind","event","target","value","filter","includes","todosBackup","todoBackup","formatTodosListing","type","placeholder","onChange","search","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICbAC,E,2MAWFC,MAAQ,CACJC,MAAO,GACPC,YAAa,GACbC,MAAO,GACPC,WAAY,I,oFAOZC,KAAKC,WACAC,KAAKF,KAAKG,c,iCAOP,IAAD,OACP,OAAOC,IAAMC,IAAI,8CAA8CH,MAAK,SAACI,GAEjE,IAAIV,EAAQU,EAASC,KACrB,EAAKC,SAAS,CACVX,YAAaD,EACbA,MAAOA,S,iCAQP,IAAD,OACPQ,IAAMC,IAAI,8CAA8CH,MAAK,SAACI,GAC1D,EAAKE,SAAS,CACVV,MAAOQ,EAASC,Y,+CAUHE,GAErB,IAAIC,EAAyBD,EAQ7B,OAPIT,KAAKL,MAAMI,WAAWY,OAAS,IAC/BD,EAAyBA,EAAuBE,QAC5C,IAAIC,OAAOb,KAAKL,MAAMI,WAAY,KAClC,iCAAmCC,KAAKL,MAAMI,WAAa,YAI5D,CAACe,OAAQJ,K,2CAOE,IAAD,OAuBjB,OAtBYV,KAAKL,MAAME,YAAYkB,KAAI,SAACC,GAEpC,IAAIC,EAAO,EAAKtB,MAAMG,MAAMoB,MAAK,SAAUD,GACvC,OAAOA,EAAKE,KAAOH,EAAKI,UAK5B,OAFAJ,EAAKK,SAAYJ,GAAQA,EAAKK,KAAQL,EAAKK,KAAO,UAG9C,wBAAIC,IAAKP,EAAKG,IACV,4BAAKH,EAAKG,IACV,4BAAKH,EAAKK,UACV,wBAAIG,wBAAyB,EAAKC,yBAAyBT,EAAKP,SAChE,4BAAKO,EAAKU,UAAY,MAAQ,MAC9B,4BACI,4BAAQC,UAAU,iBACVC,QAAS,EAAKC,WAAWC,KAAK,EAAMd,EAAKG,KADjD,iB,6BAcbY,GAEH/B,KAAKQ,SAAS,CACVT,WAAYgC,EAAMC,OAAOC,QAG7B,IAAIrC,EAAQI,KAAKL,MAAMC,MAAMsC,QAAO,SAAUlB,GAC1C,OAAOA,EAAKP,MAAM0B,SAASJ,EAAMC,OAAOC,UAE5CjC,KAAKQ,SAAS,CACVX,YAAaD,M,iCAQVuB,GAEP,IAAIvB,EAAQI,KAAKL,MAAME,YAAYqC,QAAO,SAAUlB,GAChD,OAAOA,EAAKG,KAAOA,KAEnBiB,EAAcpC,KAAKL,MAAMC,MAAMsC,QAAO,SAAUG,GAChD,OAAOA,EAAWlB,KAAOA,KAE7BnB,KAAKQ,SAAS,CACVX,YAAaD,EACbA,MAAOwC,M,+BAUX,IAAIxC,EAAQI,KAAKsC,qBAEjB,OAEI,yBAAKX,UAAU,iBAEX,2BAAOY,KAAK,OAAOC,YAAY,SAASC,SAAUzC,KAAK0C,OAAOZ,KAAK9B,QACnE,+BACI,+BACA,4BACI,kCACA,oCACA,qCACA,yCACA,yCAGJ,+BACCJ,S,GAhKH+C,aA0KlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD5C3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ffd9a2c9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component}  from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport * as serviceWorker from './serviceWorker';\n\nclass App extends Component {\n\n    /**\n     * Hold the state of the App.\n     * When variables in state are changed, the changes are automatically applied to the DOM by React:\n     * todos: the original list of downloaded todos\n     * todosSearch: the list of downloaded todos, filtered to only contain those that match the search\n     * users: the original list of downloaded users\n     * searchTearm: tracks the current search term\n     * @type {{todos: Array, todosSearch: Array, users: Array, searchTerm: string}}\n     */\n    state = {\n        todos: [],\n        todosSearch: [],\n        users: [],\n        searchTerm: \"\",\n    }\n\n    /**\n     * On initalization, load the todos and users into state\n     */\n    componentWillMount() {\n        this.getTodos()\n            .then(this.getUsers())\n    }\n\n    /**\n     * read the todos and put them into state as todosSearch and todos\n     * @returns {Promise.<TResult>|*|any|Promise<U>|never}\n     */\n    getTodos() {\n        return axios.get('https://jsonplaceholder.typicode.com/todos').then((response) => {\n\n            let todos = response.data;\n            this.setState({\n                todosSearch: todos,\n                todos: todos\n            })\n        });\n    }\n\n    /**\n     * read the users and put them into state\n     */\n    getUsers() {\n        axios.get('https://jsonplaceholder.typicode.com/users').then((response) => {\n            this.setState({\n                users: response.data\n            })\n        });\n    }\n\n    /**\n     * In the listing of todos, highlight parts of the todo's title that matches the search term\n     * @param title\n     * @returns {{__html: *}}\n     */\n    createSearchHighlighting(title) {\n\n        let titleSearchHighlighted = title;\n        if (this.state.searchTerm.length > 0) {\n            titleSearchHighlighted = titleSearchHighlighted.replace(\n                new RegExp(this.state.searchTerm, 'g'),\n                '<span class=\"searchHighlight\">' + this.state.searchTerm + '</span>'\n            );\n        }\n\n        return {__html: titleSearchHighlighted};\n    }\n\n    /**\n     * Provide html for presenting the list of todos\n     * @returns {Array}\n     */\n    formatTodosListing() {\n        let todos = this.state.todosSearch.map((todo) => {\n\n            var user = this.state.users.find(function (user) {\n                return user.id === todo.userId;\n            });\n\n            todo.userName = (user && user.name) ? user.name : \"Unknown\";\n\n            return (\n                <tr key={todo.id}>\n                    <th>{todo.id}</th>\n                    <th>{todo.userName}</th>\n                    <th dangerouslySetInnerHTML={this.createSearchHighlighting(todo.title)}></th>\n                    <th>{todo.completed ? \"Yes\" : \"No\"}</th>\n                    <th>\n                        <button className=\"btn btn-danger\"\n                                onClick={this.deleteTodo.bind(this, todo.id)}>Delete\n                        </button>\n                    </th>\n                </tr>\n            )\n        });\n        return todos;\n    }\n\n    /**\n     *\n     * @param event\n     */\n    search(event) {\n\n        this.setState({\n            searchTerm: event.target.value\n        });\n\n        let todos = this.state.todos.filter(function (todo) {\n            return todo.title.includes(event.target.value)\n        });\n        this.setState({\n            todosSearch: todos\n        });\n    }\n\n    /**\n     *\n     * @param id\n     */\n    deleteTodo(id) {\n\n        let todos = this.state.todosSearch.filter(function (todo) {\n            return todo.id !== id\n        });\n        let todosBackup = this.state.todos.filter(function (todoBackup) {\n            return todoBackup.id !== id\n        });\n        this.setState({\n            todosSearch: todos,\n            todos: todosBackup\n        });\n    }\n\n    /**\n     *\n     * @returns {XML}\n     */\n    render() {\n\n        let todos = this.formatTodosListing();\n\n        return (\n\n            <div className=\"App container\">\n\n                <input type=\"text\" placeholder=\"Search\" onChange={this.search.bind(this)}/>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>User</th>\n                        <th>Title</th>\n                        <th>Completed</th>\n                        <th>Actions</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {todos}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\n//export default App;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}